"""
Contains settings.

.. data:: CORE_DIR
.. data:: BASE_DIR
.. data:: DEFAULT_DUMP_DIR
.. data:: LOGGING_CONFIG_PATH
.. data:: DEFAULT_CLIENT_ARGUMENTS
.. data:: MINUTES_TO_SLEEP_ON_ERROR
.. data:: MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION
.. data:: MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING
.. data:: MINUTES_TO_SLEEP_AFTER_REQUEST
.. data:: WEBSITE_HOMEPAGE
"""

import configparser
import pathlib


__all__ = [
    'CORE_DIR',
    'BASE_DIR',
    'DEFAULT_DUMP_DIR',
    'LOGGING_CONFIG_PATH',
    'DEFAULT_CLIENT_ARGUMENTS',
    'MINUTES_TO_SLEEP_ON_ERROR',
    'MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION',
    'MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING',
    'MINUTES_TO_SLEEP_AFTER_REQUEST',
    'WEBSITE_HOMEPAGE'
]


CORE_DIR = pathlib.Path(__file__).parent
BASE_DIR = CORE_DIR.parent
DEFAULT_DUMP_DIR = BASE_DIR / 'tmp'
LOGGING_CONFIG_PATH = CORE_DIR / 'utils' / 'logging_' / 'logging_config.yaml'

WEBSITE_HOMEPAGE = 'https://energiya-prirody.prom.ua/'
DEFAULT_CLIENT_ARGUMENTS = {
    'headers': {
        'Accept-Language': 'ru',
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36'
    },
}

DEFAULT_MINUTES_TO_SLEEP_ON_ERROR: float = 1
DEFAULT_MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION: float = 1
DEFAULT_MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING: float = 10 / 60
DEFAULT_MINUTES_TO_SLEEP_AFTER_REQUEST: float = 5 / 60


# READING CONFIG ---------------------------------------------------
CONFIG_PATH = BASE_DIR / 'config' / 'config.ini'
config_parser = configparser.ConfigParser()
config_parser.read(CONFIG_PATH)

MINUTES_TO_SLEEP_ON_ERROR = config_parser.get(
    section='TIME_LIMITS',
    option='MINUTES_TO_SLEEP_ON_ERROR',
    fallback=DEFAULT_MINUTES_TO_SLEEP_ON_ERROR
)
MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION = config_parser.get(
    section='TIME_LIMITS',
    option='MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION',
    fallback=DEFAULT_MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION
)
MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING = config_parser.get(
    section='TIME_LIMITS',
    option='MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING',
    fallback=DEFAULT_MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING
)
MINUTES_TO_SLEEP_AFTER_REQUEST = config_parser.get(
    section='TIME_LIMITS',
    option='MINUTES_TO_SLEEP_AFTER_REQUEST',
    fallback=DEFAULT_MINUTES_TO_SLEEP_AFTER_REQUEST
)

if MINUTES_TO_SLEEP_ON_ERROR.strip():
    MINUTES_TO_SLEEP_ON_ERROR = float(MINUTES_TO_SLEEP_ON_ERROR)
else:
    MINUTES_TO_SLEEP_ON_ERROR = DEFAULT_MINUTES_TO_SLEEP_ON_ERROR

if MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION.strip():
    MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION = float(MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION)
else:
    MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION = DEFAULT_MINUTES_TO_SLEEP_ON_NETWORK_ERROR_IN_FUNCTION

if MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING.strip():
    MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING = float(MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING)
else:
    MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING = DEFAULT_MINUTES_TO_BREAK_UP_BETWEEN_GROUP_DUMPING

if MINUTES_TO_SLEEP_AFTER_REQUEST.strip():
    MINUTES_TO_SLEEP_AFTER_REQUEST = float(MINUTES_TO_SLEEP_AFTER_REQUEST)
else:
    MINUTES_TO_SLEEP_AFTER_REQUEST = DEFAULT_MINUTES_TO_SLEEP_AFTER_REQUEST
